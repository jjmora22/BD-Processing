package io.keepcoding.spark.exercise.streaming
import org.apache.spark.sql.functions._
import org.apache.spark.sql.types._
import org.apache.spark.sql.{DataFrame, SaveMode, SparkSession}

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent.duration.Duration
import scala.concurrent.{Await, Future}

object AntennaStreamingJob extends StreamingJob {

  override val spark: SparkSession = SparkSession
    .builder()
    .master(master = "local[20]")
    .appName(name = "Final Excercise SQL Streaming")
    .getOrCreate()

  import spark.implicits._

  override def readFromKafka(kafkaServer: String, topic: String): DataFrame = {
    spark
      .readStream
      .format(source= "kafka")
      .option("kafka.bootstrap.servers", kafkaServer)
      .option("subscribe", topic)
      .load()
  }

  override def parserJsonData(dataFrame: DataFrame): DataFrame = {
    val jsonSchema = StructType(Seq(

       //Estructura tabla práctica -->

        StructField("timestamp", TimestampType, nullable = false), //practica
        StructField("id", StringType, nullable = false), //practica
        StructField("antenna_id", StringType, nullable = false), //practica
        StructField("bytes", LongType, nullable = false), //practica
        StructField("app", StringType, nullable = false), //practica

      )
    )
    dataFrame
      .select(from_json($"value".cast(StringType), jsonSchema).as(alias="json"))
      .select(cols = $"json.*")

  }

  override def readAntennaMetadata(jdbcURI: String, jdbcTable: String, user: String, password: String): DataFrame = {
    spark
      .read
      .format(source = "jdbc")
      .option("url", jdbcURI)
      .option("dbtable", jdbcTable)
      .option("user", user)
      .option("password", password)
      .load()

  }

  override def enrichAntennaWithMetadata(antennaDF: DataFrame, metadataDF: DataFrame): DataFrame = {
    antennaDF.as(alias = "a")
      .join(
        metadataDF.as(alias = "b"),
        joinExprs = $"a.id" === $"b.id" // -- Práctica
        //joinExprs = $"a.id" === $"b.id" // -- Ejercicio final
      )
      .drop (col = $"b.id")

  }



  //AQUI INICIAN LOS COMPUTE DE LA PRÁCTICA

  override def computeBytesSUMbyAntenna(dataFrame: DataFrame): DataFrame = {
    dataFrame
      .select($"id", $"timestamp", $"bytes", $"app")
      .withWatermark(eventTime = "timestamp", delayThreshold = "10 seconds") // 1 minute
      .groupBy($"id", $"app", window($"timestamp", windowDuration = "30 seconds")) // 1 hour
      .agg(
        sum($"bytes").as("value"),
      )
      .select($"window.start".as("timestamp"), $"id", $"value", $"app".as("type"))
  }
  override def computeBytesSUMbyUser(dataFrame: DataFrame): DataFrame = {
    dataFrame
      .select($"id", $"email", $"quota", $"timestamp", $"bytes")
      .withWatermark(eventTime = "timestamp", delayThreshold = "10 seconds") // 1 minute
      .groupBy($"id", $"email", $"quota", window($"timestamp", windowDuration = "30 seconds")) // 1 hour
      .agg(
        sum($"bytes").as("usage"),
      )
      .select($"email", $"usage", $"quota", $"window.start".as("timestamp"))
  }
  
  override def writeToJdbc(dataFrame: DataFrame, jdbcURI: String, jdbcTable: String, user: String, password: String): Future[Unit] = Future {
    dataFrame
      .writeStream
      .foreachBatch {
        (batch: DataFrame, _: Long) => {
          batch
            .write
            .mode(SaveMode.Append)
            .format(source = "jdbc")
            .option("url", jdbcURI)
            .option("dbtable", jdbcTable)
            .option("user", user)
            .option("password", password)
            .save()

        }
      }
      .start()
      .awaitTermination()
  }

  override def writeToStorage(dataFrame: DataFrame, storageRootPath: String): Future[Unit] = Future {
    dataFrame
      .select(
        $"timestamp", $"id", $"antenna_id", $"bytes", $"app",
        year($"timestamp").as("year"),
        month($"timestamp").as("month"),
        dayofmonth($"timestamp").as("day"),
        hour($"timestamp").as("hour")
      )
      .writeStream
      .format("parquet")
      .option("path", s"$storageRootPath/data")
      .option("checkpointLocation", s"$storageRootPath/checkpoint")
      .partitionBy("hour")
      .start
      .awaitTermination()


  }


  def main(args: Array[String]): Unit = {

    val kafkaDF = readFromKafka(kafkaServer="34.175.199.59:9092", topic="devices")// Aquí hay que cambiar el tópico para la práctica
    val parsedDF = parserJsonData(kafkaDF)
    val storageFuture = writeToStorage(parsedDF, storageRootPath = "../bdprocessing/")
    val metadaDF = readAntennaMetadata(
      jdbcURI = "jdbc:postgresql://34.175.25.228:5432/postgres",
      //jdbcTable = "metadata",         //ejercicio final
      jdbcTable = "user_metadata", //practica
      user = "postgres",
      password = "postgres"
    )

    val enrichDF = enrichAntennaWithMetadata(parsedDF, metadaDF)
    //val countByLocation = computeDevicesCountByCoordinates(enrichDF) //-- Ejercicio Final
    val countByLocation = computeBytesSUMbyAntenna(enrichDF) //-- Práctica
    val jdbcFuture = writeToJdbc(countByLocation, jdbcURI = "jdbc:postgresql://34.175.25.228:5432/postgres", jdbcTable = "bytes_hourly", user = "postgres", password = "postgres")

    val countByUser = computeBytesSUMbyUser(enrichDF) //-- Práctica
    val jdbcFuture1 = writeToJdbc(countByUser, jdbcURI = "jdbc:postgresql://34.175.25.228:5432/postgres", jdbcTable="user_quota_limit", user="postgres", password="postgres")



    //val countByApp = computeBytesSUMbyApp(enrichDF) // -- Práctica
    //val jdbcFuture2 = writeToJdbc(countByApp, jdbcURI = "jdbc:postgresql://34.175.25.228:5432/postgres", jdbcTable = "antenna_agg", user = "postgres", password = "postgres")

Await.result(
  Future.sequence(Seq(storageFuture, jdbcFuture, jdbcFuture1)), Duration.Inf
  )

    spark.close()


  }
}
